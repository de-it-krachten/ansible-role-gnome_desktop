---

- name: Check if runnig in molecule
  ansible.builtin.set_fact:
    molecule_driver: "{{ lookup('env', 'MOLECULE_DRIVER_NAME') }}"

- name: Make sure that autlogin user is defined when autologin is enabled
  ansible.builtin.fail:
    msg: "Provide 'gnome_desktop_autologin=<user>' when gnome_desktop_autologin_enable=true"
  when: gnome_desktop_autologin_enable | bool and gnome_desktop_autologin | length == 0

- name: Setup gdm facts  # noqa var-naming[no-role-prefix]
  ansible.builtin.include_role:
    name: deitkrachten.facts
  vars:
    custom_facts_additional:
      - name: dm

- name: Define distro version  # noqa jinja[spacing]
  ansible.builtin.set_fact:
    distver: >-
      {%- if ansible_distribution == 'Ubuntu' -%}
      {{ ansible_distribution_version | regex_replace('\.') }}
      {%- else -%}
      {{ ansible_distribution_major_version }}
      {%- endif -%}

- name: Get variables based on OS type
  ansible.builtin.include_tasks:
    file: vars.yml

- name: Uninstall blocking packages
  ansible.builtin.package:
    name: "{{ gnome_desktop_blocking_packages }}"
    state: absent

- name: Switch package list for minimal list (only if defined)
  ansible.builtin.set_fact:
    gnome_desktop_packages: "{{ gnome_desktop_packages_minimal }}"
  when:
    - gnome_desktop_minimal
    - gnome_desktop_packages_minimal | length > 0

- name: Install packages
  ansible.builtin.include_role:
    name: deitkrachten.package
  vars:
    package_mode: "{{ gnome_desktop_package_mode }}"
    package_list: "{{ gnome_desktop_packages }}"

- name: Enable gdm
  ansible.builtin.service:
    name: gdm
    state: started
    enabled: true


# -------------------------------------------------------
# Activate graphical interface
# -------------------------------------------------------

- name: Get current systemd default  # noqa command-instead-of-module
  ansible.builtin.command: systemctl get-default
  changed_when: false
  register: systemdefault

- name: Set default to graphical target
  ansible.builtin.command: systemctl set-default graphical.target
  changed_when: true
  when: "'graphical' not in systemdefault.stdout"
  register: _systemdefault

- name: Reboot when target changed  # noqa no-handler
  ansible.builtin.reboot:
  when:
    - packages_result.changed or _systemdefault.changed
    # - ansible_virtualization_type not in [ 'docker', 'container', 'containerd' ]
    - molecule_driver | length > 0 and molecule_driver != 'docker'


# -------------------------------------------------------
# Configure GDM
# -------------------------------------------------------

- name: Rerun setup phase
  ansible.builtin.setup:

- name: Configure GDM
  community.general.ini_file:
    path: "{{ gnome_desktop_gdm_conf }}"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    no_extra_spaces: yes
    mode: "0644"
  loop:
    - { section: daemon, option: WaylandEnable, value: "{{ gnome_desktop_wayland }}" }
    - { section: daemon, option: AutomaticLoginEnable, value: "{{ gnome_desktop_autologin_enable }}" }
    - { section: daemon, option: AutomaticLogin, value: "{{ gnome_desktop_autologin }}" }
  when: (item.value | type_debug == 'bool') or item.value | length > 0
  notify: Restart gdm

- name: Activate autologin
  become: yes
  become_user: "{{ gnome_desktop_autologin }}"
  when:
    - gnome_desktop_autologin_enable | bool
    - gnome_desktop_autologin | length > 0
  block:

    - name: Get gnome settings
      ansible.builtin.command: >-
        dconf read {{ item.key }}
      changed_when: false
      loop: "{{ gnome_desktop_settings }}"
      register: _dconf

    - name: Create settings in case they do no exist (dconf-modules fails to do so)
      ansible.builtin.command: dconf write {{ item.item.key }} {{ item.item.value }}
      changed_when: true
      loop: "{{ _dconf.results }}"
      loop_control:
        label:
          - "{{ item.item.key }}"
      when: item.stdout | length == 0
      notify: Restart gdm

    - name: Set gnome settings
      community.general.dconf:
        key: "{{ item.key }}"
        value: >-
          {{ item.value | string }}
        state: present
      loop: "{{ gnome_desktop_settings }}"
      notify: Restart gdm
